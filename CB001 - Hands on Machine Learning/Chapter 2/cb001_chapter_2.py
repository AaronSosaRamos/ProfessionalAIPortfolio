# -*- coding: utf-8 -*-
"""CB001 - Chapter 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nl7AJH-f3vT0G87lAilhRliDKkAilJrY

#Logistic Regression (Regression and Classification)

Connect to Google Drive
"""

#Mount the google drive connection to our dataset
from google.colab import drive
drive.mount('/content/drive')

"""Load the dataset"""

import pandas as pd
df = pd.read_csv('/content/drive/My Drive/AI/Project 1/dataset/obesity_data.csv')

df

"""Encode categorical variables"""

import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder

"""Develop the Preprocessor of Encoding"""

preprocessor = ColumnTransformer(
    transformers=[
        ('gender_onehot', OneHotEncoder(), ['Gender']),
        ('obesity_ordinal', OrdinalEncoder(), ['ObesityCategory'])
    ],
    remainder='passthrough'
)

"""Develop the Pipeline"""

pipeline = Pipeline([
    ('preprocessor', preprocessor)
])

df_transformed = pipeline.fit_transform(df)

gender_categories = pipeline.named_steps['preprocessor'].named_transformers_['gender_onehot'].get_feature_names_out(input_features=['Gender'])
obesity_categories = ['ObesityCategory']

new_column_names = list(gender_categories) + obesity_categories + list(df.columns.drop(['Gender', 'ObesityCategory']))

df_transformed = pd.DataFrame(df_transformed, columns=new_column_names)
df_transformed

df

original_gender_values = df['Gender'].unique()
transformed_gender_values = df_transformed.filter(like='Gender_').columns

original_obesity_values = df['ObesityCategory'].unique()
transformed_obesity_values = df_transformed['ObesityCategory'].unique()

print("Original 'Gender' values:", original_gender_values)
print("Transformed 'Gender' values:", transformed_gender_values)

print("\nOriginal 'ObesityCategory' values:", original_obesity_values)
print("Transformed 'ObesityCategory' values:", transformed_obesity_values)

df_transformed

from sklearn.model_selection import train_test_split

X = df_transformed.drop(['ObesityCategory'], axis=1)
y = df_transformed['ObesityCategory']

X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.4, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

"""Implement Logistic Regressen"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import log_loss

logreg_model = LogisticRegression(max_iter=5000)
logreg_model.fit(X_train, y_train)

"""Loss Function => Log Loss"""

from sklearn.model_selection import cross_val_score

y_val_pred_proba = logreg_model.predict_proba(X_val)

log_loss_val = log_loss(y_val, y_val_pred_proba)
print("Log Loss on Validation Set:", log_loss_val)

y_test_pred_proba = logreg_model.predict_proba(X_test)

log_loss_test = log_loss(y_test, y_test_pred_proba)
print("Log Loss on Test Set:", log_loss_test)

cv_scores = cross_val_score(logreg_model, X, y, cv=5, scoring='neg_log_loss')
average_cv_score = -cv_scores.mean()
print("Average Log Loss with Cross-Validation:", average_cv_score)

values={
    'Gender_Female': 1.0,
    'Gender_Male': 0.0,
    'Age': 37.0,
    'Height': 168.451241,
    'Weight': 78.641231,
    'BMI': 27.516212,
    'PhysicalActivityLevel': 3.0
}

df_for_test = pd.DataFrame([values])

predictions = logreg_model.predict(df_for_test)
print("Obesity Category value: ",predictions)