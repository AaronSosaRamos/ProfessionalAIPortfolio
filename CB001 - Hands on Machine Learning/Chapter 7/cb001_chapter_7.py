# -*- coding: utf-8 -*-
"""CB001 - Chapter 7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o5flF8h5LW0_TH4zYs3YNnRvwlCCFLxn

# Unsupervised Learning

Clustering
"""

#Mount the google drive connection to our dataset
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import pandas as pd
df = pd.read_csv('/content/drive/My Drive/AI/datasets/wine-clustering.csv')

df.head()

df.info()

df.describe()

df.corr()

df.isnull().sum()

df.isna().sum()

"""Visualize the data"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.set(style="whitegrid")
plt.figure(figsize=(15, 10))
for i, column in enumerate(df.columns):
    plt.subplot(4, 4, i+1)
    sns.histplot(df[column], kde=True)
    plt.title(column)
plt.tight_layout()
plt.show()

plt.figure(figsize=(15, 10))
sns.pairplot(df)
plt.show()

plt.figure(figsize=(15, 10))
sns.boxplot(data=df)
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

"""# 1. K-Means"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

X = df.values
X_train, X_temp, _, _ = train_test_split(X, X, test_size=0.4, random_state=42)
X_val, X_test = train_test_split(X_temp, test_size=0.5, random_state=42)

"""Find the optimal number of clusters"""

silhouette_scores = []
for n_clusters in range(2, 11):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    cluster_labels = kmeans.fit_predict(X_train)
    silhouette_avg = silhouette_score(X_train, cluster_labels)
    silhouette_scores.append(silhouette_avg)

optimal_n_clusters = np.argmax(silhouette_scores) + 2

plt.figure(figsize=(8, 6))
plt.plot(range(2, 11), silhouette_scores, marker='o', linestyle='-')
plt.title('Silhouette Score for Different Numbers of Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.xticks(range(2, 11))
plt.grid(True)
plt.show()

print(optimal_n_clusters)

"""Feed the model"""

kmeans = KMeans(n_clusters=optimal_n_clusters, random_state=42, n_init=10)
train_cluster_labels = kmeans.fit_predict(X_train)
val_cluster_labels = kmeans.predict(X_val)
test_cluster_labels = kmeans.predict(X_test)

"""PCA Visualization"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
pca = PCA(n_components=2)
X_train_pca = pca.fit_transform(X_train_scaled)

plt.figure(figsize=(10, 6))
for cluster in range(optimal_n_clusters):
    plt.scatter(X_train_pca[train_cluster_labels == cluster, 0],
                X_train_pca[train_cluster_labels == cluster, 1],
                label=f'Cluster {cluster}')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA Visualization of Clusters (Train Data)')
plt.legend()
plt.show()

"""Loss Function => Silhouette Score (Cluster Validity Index)"""

train_silhouette_score = silhouette_score(X_train, train_cluster_labels)
val_silhouette_score = silhouette_score(X_val, val_cluster_labels)
test_silhouette_score = silhouette_score(X_test, test_cluster_labels)

print(f"Train Silhouette Score: {train_silhouette_score}")
print(f"Validation Silhouette Score: {val_silhouette_score}")
print(f"Test Silhouette Score: {test_silhouette_score}")

"""# 2. DBSCAN"""

from sklearn.cluster import DBSCAN
from sklearn.neighbors import NearestNeighbors

X = df.values
X_train, X_temp, _, _ = train_test_split(X, X, test_size=0.4, random_state=42)
X_val, X_test = train_test_split(X_temp, test_size=0.5, random_state=42)

"""Optimal Epsilon Determination"""

nearest_neighbors = NearestNeighbors(n_neighbors=2)
nearest_neighbors.fit(X_train)
distances, indices = nearest_neighbors.kneighbors(X_train)
distances = np.sort(distances, axis=0)
distances = distances[:,1]
plt.plot(distances)
plt.xlabel('Data Points Sorted by Distance')
plt.ylabel('Epsilon')
plt.title('Optimal Epsilon Determination')
plt.show()

!pip install --upgrade kneed

from kneed import KneeLocator
kneedle = KneeLocator(range(len(distances)), distances, curve='convex', direction='increasing')
optimal_index = kneedle.elbow
epsilon = distances[optimal_index]

print(epsilon)

dbscan = DBSCAN(eps=epsilon)
train_cluster_labels = dbscan.fit_predict(X_train)
val_cluster_labels = dbscan.fit_predict(X_val)
test_cluster_labels = dbscan.fit_predict(X_test)

"""PCA Visualization"""

plt.figure(figsize=(10, 6))
for cluster in np.unique(train_cluster_labels):
    if cluster != -1:
        plt.scatter(X_train_pca[train_cluster_labels == cluster, 0],
                    X_train_pca[train_cluster_labels == cluster, 1],
                    label=f'Cluster {cluster}')
plt.scatter(X_train_pca[train_cluster_labels == -1, 0],
            X_train_pca[train_cluster_labels == -1, 1],
            color='black', label='Noise')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA Visualization of Clusters (Train Data)')
plt.legend()
plt.show()

"""# 3. Hierarchical Cluster Analysis"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import AgglomerativeClustering
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

X = df.values
X_train, X_temp, _, _ = train_test_split(X, X, test_size=0.4, random_state=42)
X_val, X_test = train_test_split(X_temp, test_size=0.5, random_state=42)

"""Find the optimal number of clusters"""

silhouette_scores = []
for n_clusters in range(2, 11):
    agg_clustering = AgglomerativeClustering(n_clusters=n_clusters)
    cluster_labels = agg_clustering.fit_predict(X_train)
    silhouette_avg = silhouette_score(X_train, cluster_labels)
    silhouette_scores.append(silhouette_avg)

plt.figure(figsize=(8, 6))
plt.plot(range(2, 11), silhouette_scores, marker='o', linestyle='-')
plt.title('Silhouette Score for Different Numbers of Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.xticks(range(2, 11))
plt.grid(True)
plt.show()

optimal_n_clusters = np.argmax(silhouette_scores) + 2

print(optimal_n_clusters)

agg_clustering = AgglomerativeClustering(n_clusters=optimal_n_clusters)
train_cluster_labels = agg_clustering.fit_predict(X_train)
val_cluster_labels = agg_clustering.fit_predict(X_val)
test_cluster_labels = agg_clustering.fit_predict(X_test)

"""PCA Visualization"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
pca = PCA(n_components=2)
X_train_pca = pca.fit_transform(X_train_scaled)

plt.figure(figsize=(10, 6))
for cluster in range(optimal_n_clusters):
    plt.scatter(X_train_pca[train_cluster_labels == cluster, 0],
                X_train_pca[train_cluster_labels == cluster, 1],
                label=f'Cluster {cluster}')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA Visualization of Clusters (Train Data)')
plt.legend()
plt.show()

"""Loss Function => Silhouette Score (Cluster Validity Index)"""

train_silhouette_score = silhouette_score(X_train, train_cluster_labels)
val_silhouette_score = silhouette_score(X_val, val_cluster_labels)
test_silhouette_score = silhouette_score(X_test, test_cluster_labels)

print(f"Train Silhouette Score: {train_silhouette_score}")
print(f"Validation Silhouette Score: {val_silhouette_score}")
print(f"Test Silhouette Score: {test_silhouette_score}")