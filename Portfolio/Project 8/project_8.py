# -*- coding: utf-8 -*-
"""Project 8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o3JNGpCnfNRB32b2UI-OEhR7ey5EI41B

#Project 8 - Anomaly and Novelty Detection - Wilfredo Aaron Sosa Ramos

#Data Engineering Lifecycle

#Phase 1: Ingestion
"""

#Mount the google drive connection to our dataset
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import pandas as pd
df = pd.read_csv('/content/drive/My Drive/AI/Project 8/dataset/air_pollution new.csv')

df.head()

df.info()

df.describe()

df.shape

df.drop(["city", "country"], axis=1, inplace=True)

"""# Phase 2: Transformation"""

features = df.columns

features

for feature_name in features:
    df[feature_name] = df[feature_name].str.replace('.', '').astype(float)

df.info()

df.tail(5)

df.isnull().sum()

df.isna().sum()

numeric_features = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer

numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features)
    ])

"""# Phase 3: Serving

#Isolation Forest
"""

from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
import numpy as np

df_encoded = preprocessor.fit_transform(df)
df_encoded = pd.DataFrame(df_encoded, columns=df.columns)

isolation_forest_model = IsolationForest(contamination=0.1)

isolation_forest_model.fit(df_encoded)

df_encoded['anomaly_score'] = isolation_forest_model.decision_function(df_encoded)
df_encoded['anomaly'] = isolation_forest_model.predict(df_encoded[numeric_features])

plt.scatter(df_encoded['2022'], df_encoded['2023'], c=df_encoded['anomaly'], cmap='viridis', marker='o', edgecolors='k', alpha=0.8)
plt.colorbar(label='Anomaly Score')
plt.xlabel('2022')
plt.ylabel('2023')
plt.title('Isolation Forest for Anomaly Detection')

plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.hist(df_encoded['anomaly_score'], bins=50, density=True, alpha=0.7, color='blue')
plt.xlabel('Anomaly Score')
plt.ylabel('Density')
plt.title('Distribution of Anomaly Scores')
plt.grid(True)
plt.show()

plt.figure(figsize=(6, 4))
plt.hist(df_encoded['anomaly'], bins=[-1, 0, 1], alpha=0.7, color='green')
plt.xlabel('Anomaly Label')
plt.ylabel('Frequency')
plt.title('Distribution of Anomaly Labels')
plt.xticks([-1, 1], ['Anomaly', 'Inlier'])
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.hist(df_encoded['anomaly_score'], bins=50, density=True, alpha=0.7, color='blue')
plt.xlabel('Anomaly Score')
plt.ylabel('Density')
plt.title('Distribution of Anomaly Scores (Novelty Detection)')
plt.grid(True)
plt.show()

# Plotting anomaly labels
plt.figure(figsize=(6, 4))
plt.hist(df_encoded['anomaly'], bins=[-1, 0, 1], alpha=0.7, color='green')
plt.xlabel('Anomaly Label')
plt.ylabel('Frequency')
plt.title('Distribution of Anomaly Labels (Novelty Detection)')
plt.xticks([-1, 1], ['Novelty', 'Inlier'])
plt.grid(True)
plt.show()

"""# Local Outlier Factor"""

from sklearn.neighbors import LocalOutlierFactor

lof_model = LocalOutlierFactor(contamination=0.1)

df_encoded2 = preprocessor.fit_transform(df)
df_encoded2 = pd.DataFrame(df_encoded2, columns=df.columns)

lof_model.fit(df_encoded2)

df_encoded2['anomaly_score'] = -lof_model.negative_outlier_factor_
df_encoded2['anomaly'] = lof_model.fit_predict(df_encoded2[numeric_features])

plt.figure(figsize=(10, 6))

plt.scatter(df_encoded2['2022'], df_encoded2['2023'], c=df_encoded2['anomaly_score'], cmap='viridis', marker='o', edgecolors='k', alpha=0.8)
plt.colorbar(label='Anomaly Score')
plt.xlabel('2022')
plt.ylabel('2023')
plt.title('Local Outlier Factor for Novelty Detection')

plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.hist(df_encoded2['anomaly_score'], bins=50, density=True, alpha=0.7, color='blue')
plt.xlabel('Anomaly Score')
plt.ylabel('Density')
plt.title('Distribution of Anomaly Scores')
plt.grid(True)
plt.show()

plt.figure(figsize=(6, 4))
plt.hist(df_encoded2['anomaly'], bins=[-1, 0, 1], alpha=0.7, color='green')
plt.xlabel('Anomaly Label')
plt.ylabel('Frequency')
plt.title('Distribution of Anomaly Labels')
plt.xticks([-1, 1], ['Anomaly', 'Inlier'])
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.hist(df_encoded2['anomaly_score'], bins=50, density=True, alpha=0.7, color='blue')
plt.xlabel('Anomaly Score')
plt.ylabel('Density')
plt.title('Distribution of Anomaly Scores (Novelty Detection)')
plt.grid(True)
plt.show()

plt.figure(figsize=(6, 4))
plt.hist(df_encoded2['anomaly'], bins=[-1, 0, 1], alpha=0.7, color='green')
plt.xlabel('Anomaly Label')
plt.ylabel('Frequency')
plt.title('Distribution of Anomaly Labels (Novelty Detection)')
plt.xticks([-1, 1], ['Novelty', 'Inlier'])
plt.grid(True)
plt.show()