# -*- coding: utf-8 -*-
"""Project 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19A4dYYHIXQWFrLMM-C9sytv5Bpq4iqe6

# Project 1 - Obesity Predictor - Wilfredo Aaron Sosa Ramos

# Connect the project with Google Drive
To achieve our dataset
"""

#Mount the google drive connection to our dataset
from google.colab import drive
drive.mount('/content/drive')

"""# Phase 1: Extract

# Load our Dataset
"""

import pandas as pd
df = pd.read_csv('/content/drive/My Drive/AI/Project 1/dataset/obesity_data.csv')

"""# Check our Dataset"""

df

"""1. First 5 rows"""

df.head()

"""2. Metadata"""

df.info()

"""3. Statistical data for each numeric columns"""

df.describe()

"""4. Matrix shape of the dataset"""

df.shape

"""5. Columns of the dataset"""

df.columns

"""6. Data types"""

df.dtypes

"""7. Unique values per each column"""

df.nunique()

"""8. Number of values and null rows per each column"""

for c in df.columns:
  print(c)
  print(df[c].value_counts())

df.isnull().sum()

"""9. The correlation per each dimension"""

df.corr()

"""# Phase 2: Transform

1. Duplicated data
"""

df.duplicated()

df_no_duplicated = df.drop_duplicates()
df_no_duplicated.shape

"""2. Empty data"""

df_no_na = df_no_duplicated.dropna()
df_no_na.shape

"""3. Encode categorical dimensions (With Feature Engineering)"""

df_no_na["Gender"].unique()

df_no_na["ObesityCategory"].unique()

"""One-Hot Encoder for Gender"""

from sklearn.preprocessing import OneHotEncoder
gender_df = df_no_na[['Gender']]

encoder = OneHotEncoder(sparse=False, drop='first', dtype=int)
gender_encoded = encoder.fit_transform(gender_df)

columns_encoded = ["Gender_Encoded"]
gender_encoded_df = pd.DataFrame(gender_encoded, columns=columns_encoded)

df_gender_encoded = pd.concat([df_no_na, gender_encoded_df], axis=1)
df_gender_encoded = df_gender_encoded.drop('Gender', axis=1)

df_gender_encoded.head()

"""

*   Female = 0
*   Male = 1
"""

df_gender_encoded

"""Label Encoding for ObesityCategory"""

from sklearn.preprocessing import LabelEncoder
obesity_category_column = df_gender_encoded['ObesityCategory']

label_encoder = LabelEncoder()

df_obesity_category_encoded = df_gender_encoded.copy()
df_obesity_category_encoded['ObesityCategory_Encoded'] = label_encoder.fit_transform(obesity_category_column)

df_obesity_category_encoded.groupby('ObesityCategory')['ObesityCategory_Encoded'].unique().reset_index()

df_obesity_category_encoded = df_obesity_category_encoded.drop('ObesityCategory', axis=1)
df_obesity_category_encoded

"""4. Detecting outliers"""

df_obesity_category_encoded.corr()

"""

*   Box Plot

"""

import matplotlib.pyplot as plt
import seaborn as sns

for column in df_obesity_category_encoded.columns:
    plt.figure()
    sns.boxplot(x=df_obesity_category_encoded[column])
    plt.title(f'Boxplot of {column}')
    plt.show()

"""

*   Z-Score
"""

from scipy import stats
import numpy as np

z_scores = stats.zscore(df_obesity_category_encoded)

threshold = 3

outliers = (np.abs(z_scores) > threshold).any(axis=1)

print("Outliers Index:", np.where(outliers)[0])

outliers_data = df_obesity_category_encoded.iloc[np.where(outliers)[0]]

print(outliers_data)

"""# Phase 3: Load

Loss Function => MSE (Mean Squared Error)

Alternative 1: Logistic Regression
"""

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

#Data division
#60% for training data
#20% for validation data
#20% for test data

features=df_obesity_category_encoded.drop('ObesityCategory_Encoded', axis=1)
target=df_obesity_category_encoded['ObesityCategory_Encoded']

X_train, X_temp, y_train, y_temp = train_test_split(features, target, test_size=0.4, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

logistic_regression_model = LogisticRegression()
logistic_regression_model.fit(X_train_scaled, y_train)

predictions_val = logistic_regression_model.predict(X_val_scaled)
predictions_val_rounded = np.round(predictions_val)

mse_val = mean_squared_error(y_val, predictions_val_rounded)
print(f'Mean Squared Error on Validation Set: {mse_val}')

predictions_test = logistic_regression_model.predict(X_test_scaled)
predictions_test_rounded = np.round(predictions_test)

mse_test = mean_squared_error(y_test, predictions_test_rounded)
print(f'Mean Squared Error on Test Set: {mse_test}')

"""Cross-Validation"""

X_scaled = scaler.transform(features)
cv_scores = cross_val_score(logistic_regression_model, X_scaled, target, cv=5, scoring='neg_mean_squared_error')
cv_mse = -np.mean(cv_scores)
print(f'Mean Squared Error using Cross-Validation: {cv_mse}')

"""Loss Function => Categorical Cross Entropy

"""

X_scaled = scaler.transform(features)
cv_scores = cross_val_score(logistic_regression_model, X_scaled, target, cv=5)
cv_accuracy = np.mean(cv_scores)
print(f'Cross-Validation Accuracy: {cv_accuracy}')

"""Alternative 2: Linear SVC"""

from sklearn.svm import LinearSVC
features=df_obesity_category_encoded.drop('ObesityCategory_Encoded', axis=1)
target=df_obesity_category_encoded['ObesityCategory_Encoded']

X_train, X_temp, y_train, y_temp = train_test_split(features, target, test_size=0.4, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

linear_svc_model = LinearSVC()
linear_svc_model.fit(X_train_scaled, y_train)

"""Loss Function => MSE"""

predictions_val = linear_svc_model.predict(X_val_scaled)
mse_val = mean_squared_error(y_val, predictions_val)
print(f'Mean Squared Error on Validation Set: {mse_val}')

predictions_test = linear_svc_model.predict(X_test_scaled)
mse_test = mean_squared_error(y_test, predictions_test)
print(f'Mean Squared Error on Test Set: {mse_test}')

X_scaled = scaler.transform(features)
cv_scores = cross_val_score(linear_svc_model, X_scaled, target, cv=5, scoring='neg_mean_squared_error')
cv_mse = -np.mean(cv_scores)
print(f'Mean Squared Error using Cross-Validation: {cv_mse}')

"""Loss Function => Categorical Cross Entropy"""

X_scaled = scaler.transform(features)
cv_scores = cross_val_score(linear_svc_model, X_scaled, target, cv=5)
cv_accuracy = np.mean(cv_scores)
print(f'Cross-Validation Accuracy: {cv_accuracy}')

"""Alternative 3: Random Forest Regressor"""

from sklearn.ensemble import RandomForestRegressor
features = df_obesity_category_encoded.drop('ObesityCategory_Encoded', axis=1)

target = df_obesity_category_encoded['ObesityCategory_Encoded']

X_train, X_temp, y_train, y_temp = train_test_split(features, target, test_size=0.4, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

random_forest_regressor = RandomForestRegressor(random_state=42)
random_forest_regressor.fit(X_train, y_train)

"""Loss Function => MSE"""

predictions_val = random_forest_regressor.predict(X_val)
predictions_val_rounded = np.round(predictions_val)

mse_val = mean_squared_error(y_val, predictions_val_rounded)
print(f'Mean Squared Error on Validation Set: {mse_val}')

predictions_test = random_forest_regressor.predict(X_test)
predictions_test_rounded = np.round(predictions_test)

mse_test = mean_squared_error(y_test, predictions_test_rounded)
print(f'Mean Squared Error on Test Set: {mse_test}')

cv_scores = cross_val_score(random_forest_regressor, features, target, cv=5, scoring='neg_mean_squared_error')
cv_mse = -np.mean(cv_scores)
print(f'Mean Squared Error using Cross-Validation: {cv_mse}')

"""Loss Function => Categorical Cross Entropy"""

X_scaled = scaler.transform(features)
cv_scores = cross_val_score(random_forest_regressor, X_scaled, target, cv=5)
cv_accuracy = np.mean(cv_scores)
print(f'Cross-Validation Accuracy: {cv_accuracy}')

"""Loss Function => R2"""

from sklearn.metrics import r2_score
r2_validation = r2_score(y_val, predictions_val)
print(f'R² on Validation Set: {r2_validation}')

r2_test = r2_score(y_test, predictions_test)
print(f'R² on Test Set: {r2_test}')

"""Overfitting Analysis

1. Learning Curve
"""

from sklearn.model_selection import learning_curve
import matplotlib.pyplot as plt

train_sizes, train_scores, test_scores = learning_curve(random_forest_regressor, X_train, y_train, cv=5, scoring='neg_mean_squared_error', train_sizes=np.linspace(0.1, 1.0, 10))

train_mean = -np.mean(train_scores, axis=1)
train_std = np.std(train_scores, axis=1)
test_mean = -np.mean(test_scores, axis=1)
test_std = np.std(test_scores, axis=1)

plt.figure(figsize=(10, 6))
plt.plot(train_sizes, train_mean, label='Training Score', color='blue', marker='o')
plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, alpha=0.15, color='blue')
plt.plot(train_sizes, test_mean, label='Cross-Validation Score', color='green', marker='o')
plt.fill_between(train_sizes, test_mean - test_std, test_mean + test_std, alpha=0.15, color='green')

plt.title('Learning Curve')
plt.xlabel('Training Set Size')
plt.ylabel('Mean Squared Error')
plt.legend(loc='best')
plt.show()

"""2. Feature importances"""

feature_importances = random_forest_regressor.feature_importances_
feature_names = X_train.columns

plt.figure(figsize=(10, 6))
plt.barh(range(len(feature_importances)), feature_importances, align='center')
plt.yticks(range(len(feature_importances)), feature_names)
plt.xlabel('Feature Importance')
plt.ylabel('Feature')
plt.title('Feature Importance in RandomForestRegressor')
plt.show()

"""3. GridCV Best Parameters"""

from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

random_forest_regressor = RandomForestRegressor(random_state=42)

grid_search = GridSearchCV(random_forest_regressor, param_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)

grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_
print(f'Best Hyperparameters: {best_params}')

"""Model Tunning"""

tuned_random_forest_regressor = RandomForestRegressor(**best_params, random_state=42)
tuned_random_forest_regressor.fit(X_train, y_train)
predictions_test_tuned = tuned_random_forest_regressor.predict(X_test)

"""Loss Functions => MSE and R2"""

mse_test_tuned = mean_squared_error(y_test, predictions_test_tuned)
r2_test_tuned = r2_score(y_test, predictions_test_tuned)

print(f'MSE on Test Set (Tuned Model): {mse_test_tuned}')
print(f'R² on Test Set (Tuned Model): {r2_test_tuned}')

"""Alternative 4: LinearRegression"""

features = df_obesity_category_encoded.drop('ObesityCategory_Encoded', axis=1)

target = df_obesity_category_encoded['ObesityCategory_Encoded']

X_train, X_temp, y_train, y_temp = train_test_split(features, target, test_size=0.4, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

from sklearn.linear_model import LinearRegression
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

"""Loss Function => MSE"""

predictions_val = linear_model.predict(X_val)
predictions_val_rounded = np.round(predictions_val)

mse_val = mean_squared_error(y_val, predictions_val_rounded)
print(f'Mean Squared Error on Validation Set: {mse_val}')

predictions_test = linear_model.predict(X_test)
predictions_test_rounded = np.round(predictions_test)

mse_test = mean_squared_error(y_test, predictions_test_rounded)
print(f'Mean Squared Error on Test Set: {mse_test}')

cv_scores = cross_val_score(linear_model, features, target, cv=5, scoring='neg_mean_squared_error')
cv_mse = -np.mean(cv_scores)
print(f'Mean Squared Error using Cross-Validation: {cv_mse}')

"""Loss Function => R2"""

predictions_val = linear_model.predict(X_val)
predictions_val_rounded = np.round(predictions_val)

r2_val = r2_score(y_val, predictions_val_rounded)
print(f'R² on Validation Set: {r2_val}')

predictions_test = linear_model.predict(X_test)
predictions_test_rounded = np.round(predictions_test)

r2_test = r2_score(y_test, predictions_test_rounded)
print(f'R² on Test Set: {r2_test}')

cv_scores = cross_val_score(linear_model, features, target, cv=5, scoring='r2')
cv_r2 = np.mean(cv_scores)
print(f'R² using Cross-Validation: {cv_r2}')

"""With StandardScaler"""

features = df_obesity_category_encoded.drop('ObesityCategory_Encoded', axis=1)
target = df_obesity_category_encoded['ObesityCategory_Encoded']

X_train, X_temp, y_train, y_temp = train_test_split(features, target, test_size=0.4, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)

X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

linear_model = LinearRegression()
linear_model.fit(X_train_scaled, y_train)

"""Loss Function => MSE"""

predictions_val = linear_model.predict(X_val_scaled)
predictions_val_rounded = np.round(predictions_val)

mse_val = mean_squared_error(y_val, predictions_val_rounded)
print(f'Mean Squared Error on Validation Set: {mse_val}')

predictions_test = linear_model.predict(X_test_scaled)
predictions_test_rounded = np.round(predictions_test)

mse_test = mean_squared_error(y_test, predictions_test_rounded)
print(f'Mean Squared Error on Test Set: {mse_test}')

X_scaled = scaler.transform(features)
cv_scores = cross_val_score(linear_model, X_scaled, target, cv=5, scoring='neg_mean_squared_error')
cv_mse = -np.mean(cv_scores)
print(f'Mean Squared Error using Cross-Validation: {cv_mse}')

"""Loss Function => R2"""

r2_val = r2_score(y_val, predictions_val_rounded)
print(f'R² on Validation Set: {r2_val}')

predictions_test = linear_model.predict(X_test_scaled)
predictions_test_rounded = np.round(predictions_test)

r2_test = r2_score(y_test, predictions_test_rounded)
print(f'R² on Test Set: {r2_test}')

X_scaled = scaler.transform(features)
cv_scores = cross_val_score(linear_model, X_scaled, target, cv=5, scoring='r2')
cv_r2 = np.mean(cv_scores)
print(f'R² using Cross-Validation: {cv_r2}')

"""# Predictions

A random row
"""

df_obesity_category_encoded.loc[152]

"""Develop the DF"""

data = {
    'Age': [58.000000],
    'Height': [162.196983],
    'Weight': [58.265965],
    'BMI': [22.147739],
    'PhysicalActivityLevel': [4.000000],
    'Gender_Encoded': [1.000000]
}

df_for_prediction = pd.DataFrame(data)

"""# Predictions"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(df_for_prediction)

logistic_regression_result = logistic_regression_model.predict(X_train_scaled)
print("Logistic Regression Result: ", logistic_regression_result)

linear_svc_result = linear_svc_model.predict(X_train_scaled)
print("Linear SVC Result: ", linear_svc_result)

random_forest_regressor_result = tuned_random_forest_regressor.predict(df_for_prediction)
print("Random Forest Regressor Result: ", random_forest_regressor_result)

linear_model_result = linear_model.predict(df_for_prediction)
print("Linear Regression Result: ", linear_model_result)